{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ShyamLakhani\\\\Desktop\\\\my-app\\\\src\\\\Custom\\\\Toggle\\\\index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ReactComponent } from \"react-formio\";\nimport settingsForm from \"./Toggle.settingsForm\";\n/**\r\n * An example React component\r\n *\r\n * Replace this with your custom react component. It needs to have two things.\r\n * 1. The value should be stored is state as \"value\"\r\n * 2. When the value changes, call props.onChange(null, newValue);\r\n *\r\n * This component is very simple. When clicked, it will set its value to \"Changed\".\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToggleCustomComp = class ToggleCustomComp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setValue = () => {\n      this.setState(prevState => ({\n        value: !prevState.value\n      }), () => this.props.onChange(null, this.state.value));\n    };\n\n    this.state = {\n      value: props.value\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      class: \"switch\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onClick: this.setValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"slider round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n};\nexport default class Toggle extends ReactComponent {\n  /**\r\n   * This function tells the form builder about your component. It's name, icon and what group it should be in.\r\n   *\r\n   * @returns {{title: string, icon: string, group: string, documentation: string, weight: number, schema: *}}\r\n   */\n  static get builderInfo() {\n    return {\n      title: \"Toggle\",\n      icon: \"square\",\n      group: \"Data\",\n      documentation: \"\",\n      weight: -10,\n      schema: Toggle.schema()\n    };\n  }\n  /**\r\n   * This function is the default settings for the component. At a minimum you want to set the type to the registered\r\n   * type of your component (i.e. when you call Components.setComponent('type', MyComponent) these types should match.\r\n   *\r\n   * @param sources\r\n   * @returns {*}\r\n   */\n\n\n  static schema() {\n    return ReactComponent.schema({\n      type: \"toggleCustomComp\",\n      label: \"Default Label\"\n    });\n  }\n  /*\r\n   * Defines the settingsForm when editing a component in the builder.\r\n   */\n\n\n  /**\r\n   * This function is called when the DIV has been rendered and added to the DOM. You can now instantiate the react component.\r\n   *\r\n   * @param DOMElement\r\n   * #returns ReactInstance\r\n   */\n  attachReact(element) {\n    return ReactDOM.render( /*#__PURE__*/_jsxDEV(ToggleCustomComp, {\n      component: this.component // These are the component settings if you want to use them to render the component.\n      ,\n      value: this.dataValue // The starting value of the component.\n      ,\n      onChange: this.updateValue // The onChange event to call when the value changes.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), element);\n  }\n  /**\r\n   * Automatically detach any react components.\r\n   *\r\n   * @param element\r\n   */\n\n\n  detachReact(element) {\n    if (element) {\n      ReactDOM.unmountComponentAtNode(element);\n    }\n  }\n\n}\nToggle.editForm = settingsForm;","map":{"version":3,"sources":["C:/Users/ShyamLakhani/Desktop/my-app/src/Custom/Toggle/index.js"],"names":["React","Component","ReactDOM","ReactComponent","settingsForm","ToggleCustomComp","constructor","props","setValue","setState","prevState","value","onChange","state","render","Toggle","builderInfo","title","icon","group","documentation","weight","schema","type","label","attachReact","element","component","dataValue","updateValue","detachReact","unmountComponentAtNode","editForm"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,MAAnBA,gBAAmB,SAAcJ,SAAd,CAAwB;AAC/CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBC,QAPmB,GAOR,MAAM;AACf,WAAKC,QAAL,CACEC,SAAS,KAAK;AAAEC,QAAAA,KAAK,EAAE,CAACD,SAAS,CAACC;AAApB,OAAL,CADX,EAEE,MAAM,KAAKJ,KAAL,CAAWK,QAAX,CAAoB,IAApB,EAA0B,KAAKC,KAAL,CAAWF,KAArC,CAFR;AAID,KAZkB;;AAEjB,SAAKE,KAAL,GAAa;AACXF,MAAAA,KAAK,EAAEJ,KAAK,CAACI;AADF,KAAb;AAGD;;AASDG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAO,MAAA,KAAK,EAAC,QAAb;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,OAAO,EAAE,KAAKN;AAArC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAtB8C,CAAjD;AAyBA,eAAe,MAAMO,MAAN,SAAqBZ,cAArB,CAAoC;AACjD;AACF;AACA;AACA;AACA;AACwB,aAAXa,WAAW,GAAG;AACvB,WAAO;AACLC,MAAAA,KAAK,EAAE,QADF;AAELC,MAAAA,IAAI,EAAE,QAFD;AAGLC,MAAAA,KAAK,EAAE,MAHF;AAILC,MAAAA,aAAa,EAAE,EAJV;AAKLC,MAAAA,MAAM,EAAE,CAAC,EALJ;AAMLC,MAAAA,MAAM,EAAEP,MAAM,CAACO,MAAP;AANH,KAAP;AAQD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACe,SAANA,MAAM,GAAG;AACd,WAAOnB,cAAc,CAACmB,MAAf,CAAsB;AAC3BC,MAAAA,IAAI,EAAE,kBADqB;AAE3BC,MAAAA,KAAK,EAAE;AAFoB,KAAtB,CAAP;AAID;AAED;AACF;AACA;;;AAGE;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,WAAOxB,QAAQ,CAACY,MAAT,eACL,QAAC,gBAAD;AACE,MAAA,SAAS,EAAE,KAAKa,SADlB,CAC6B;AAD7B;AAEE,MAAA,KAAK,EAAE,KAAKC,SAFd,CAEyB;AAFzB;AAGE,MAAA,QAAQ,EAAE,KAAKC,WAHjB,CAG8B;;AAH9B;AAAA;AAAA;AAAA;AAAA,YADK,EAMLH,OANK,CAAP;AAQD;AAED;AACF;AACA;AACA;AACA;;;AACEI,EAAAA,WAAW,CAACJ,OAAD,EAAU;AACnB,QAAIA,OAAJ,EAAa;AACXxB,MAAAA,QAAQ,CAAC6B,sBAAT,CAAgCL,OAAhC;AACD;AACF;;AA9DgD;AAA9BX,M,CAkCZiB,Q,GAAW5B,Y","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ReactComponent } from \"react-formio\";\r\nimport settingsForm from \"./Toggle.settingsForm\";\r\n\r\n/**\r\n * An example React component\r\n *\r\n * Replace this with your custom react component. It needs to have two things.\r\n * 1. The value should be stored is state as \"value\"\r\n * 2. When the value changes, call props.onChange(null, newValue);\r\n *\r\n * This component is very simple. When clicked, it will set its value to \"Changed\".\r\n */\r\nconst ToggleCustomComp = class extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: props.value\r\n    };\r\n  }\r\n\r\n  setValue = () => {\r\n    this.setState(\r\n      prevState => ({ value: !prevState.value }),\r\n      () => this.props.onChange(null, this.state.value)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <label class=\"switch\">\r\n        <input type=\"checkbox\" onClick={this.setValue} />\r\n        <span class=\"slider round\" />\r\n      </label>\r\n    );\r\n  }\r\n};\r\n\r\nexport default class Toggle extends ReactComponent {\r\n  /**\r\n   * This function tells the form builder about your component. It's name, icon and what group it should be in.\r\n   *\r\n   * @returns {{title: string, icon: string, group: string, documentation: string, weight: number, schema: *}}\r\n   */\r\n  static get builderInfo() {\r\n    return {\r\n      title: \"Toggle\",\r\n      icon: \"square\",\r\n      group: \"Data\",\r\n      documentation: \"\",\r\n      weight: -10,\r\n      schema: Toggle.schema()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This function is the default settings for the component. At a minimum you want to set the type to the registered\r\n   * type of your component (i.e. when you call Components.setComponent('type', MyComponent) these types should match.\r\n   *\r\n   * @param sources\r\n   * @returns {*}\r\n   */\r\n  static schema() {\r\n    return ReactComponent.schema({\r\n      type: \"toggleCustomComp\",\r\n      label: \"Default Label\"\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Defines the settingsForm when editing a component in the builder.\r\n   */\r\n  static editForm = settingsForm;\r\n\r\n  /**\r\n   * This function is called when the DIV has been rendered and added to the DOM. You can now instantiate the react component.\r\n   *\r\n   * @param DOMElement\r\n   * #returns ReactInstance\r\n   */\r\n  attachReact(element) {\r\n    return ReactDOM.render(\r\n      <ToggleCustomComp\r\n        component={this.component} // These are the component settings if you want to use them to render the component.\r\n        value={this.dataValue} // The starting value of the component.\r\n        onChange={this.updateValue} // The onChange event to call when the value changes.\r\n      />,\r\n      element\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Automatically detach any react components.\r\n   *\r\n   * @param element\r\n   */\r\n  detachReact(element) {\r\n    if (element) {\r\n      ReactDOM.unmountComponentAtNode(element);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}