{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, focusFirstFocusableChild } from '@progress/kendo-react-common';\n/**\n * Represents the [KendoReact AppBarSpacer component]({% slug contentarrangement_appbar %}#toc-defining-spacings).\n * Used to give additional white space between the AppBar sections and provides a way for customizing its width.\n *\n * @example\n * ```jsx\n *\n * const App = () => {\n *   return (\n *       <AppBar>\n *           <AppBarSection>\n *               <span className=\"k-icon k-i-menu\" />\n *           </AppBarSection>\n *\n *           <AppBarSpacer style={{ width: 8 }} />\n *\n *           <AppBarSection>\n *               <h1 className=\"title\">{tc.text} AppBar</h1>\n *           </AppBarSection>\n *\n *           <AppBarSpacer />\n *\n *           <AppBarSection>\n *               <BadgeContainer>\n *                   <span className=\"k-icon k-i-bell\" />\n *                   <Badge themeColor=\"info\" shape=\"dot\" />\n *               </BadgeContainer>\n *           </AppBarSection>\n *      </AppBar>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var AppBarSpacer = React.forwardRef(function (props, target) {\n  var children = props.children,\n      className = props.className,\n      style = props.style;\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      focusFirstFocusableChild(elementRef.current);\n    }\n  }, []);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement\n    };\n  }, [focusElement]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var spacerClasses = React.useMemo(function () {\n    return classNames('k-appbar-spacer', {\n      'k-appbar-spacer-sized': style && style.width && style.width !== null\n    }, className);\n  }, [className, style]);\n  var spacerStyles = React.useMemo(function () {\n    return {\n      flexBasis: style && style.width ? style.width : undefined\n    };\n  }, [style]);\n  return React.createElement(\"span\", {\n    className: spacerClasses,\n    style: spacerStyles\n  }, children);\n});\nAppBarSpacer.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object\n};\nAppBarSpacer.displayName = 'KendoAppBarSpacer';","map":{"version":3,"sources":["../../../src/appbar/AppBarSpacer.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAEA,SAAS,UAAT,EAAqB,wBAArB,QAAqD,8BAArD;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCG;;AACH,OAAO,IAAM,YAAY,GAAG,KAAK,CAAC,UAAN,CAA+D,UAAC,KAAD,EAAQ,MAAR,EAAc;AAEjG,MAAA,QAAA,GAAA,KAAA,CAAA,QAAA;AAAA,MAAU,SAAA,GAAA,KAAA,CAAA,SAAV;AAAA,MAAqB,KAAA,GAAA,KAAA,CAAA,KAArB;AAGJ,MAAM,UAAU,GAAG,KAAK,CAAC,MAAN,CAA6B,IAA7B,CAAnB;AACA,MAAM,YAAY,GAAG,KAAK,CAAC,WAAN,CACjB,YAAA;AACI,QAAI,UAAU,CAAC,OAAf,EAAwB;AACpB,MAAA,wBAAwB,CAAC,UAAU,CAAC,OAAZ,CAAxB;AACH;AACJ,GALgB,EAMjB,EANiB,CAArB;AASA,MAAM,mBAAmB,GAAG,KAAK,CAAC,WAAN,CACxB,YAAA;AAA0B,WAAC;AACvB,MAAA,OAAO,EAAE,UAAU,CAAC,OADG;AAEvB,MAAA,KAAK,EAAE;AAFgB,KAAD;AAGxB,GAJsB,EAKxB,CAAC,YAAD,CALwB,CAA5B;AAQA,EAAA,KAAK,CAAC,mBAAN,CAA0B,MAA1B,EAAkC,mBAAlC;AAEA,MAAM,aAAa,GAAG,KAAK,CAAC,OAAN,CAClB,YAAA;AAAM,WAAA,UAAU,CACZ,iBADY,EAEZ;AACI,+BAAyB,KAAK,IAAI,KAAK,CAAC,KAAf,IAAwB,KAAK,CAAC,KAAN,KAAgB;AADrE,KAFY,EAAV,SAAU,CAAV;AAML,GAPiB,EAQlB,CAAC,SAAD,EAAY,KAAZ,CARkB,CAAtB;AAWA,MAAM,YAAY,GAAG,KAAK,CAAC,OAAN,CACjB,YAAA;AACI,WAAO;AACH,MAAA,SAAS,EAAE,KAAK,IAAI,KAAK,CAAC,KAAf,GAAuB,KAAK,CAAC,KAA7B,GAAqC;AAD7C,KAAP;AAGH,GALgB,EAMjB,CAAC,KAAD,CANiB,CAArB;AAQA,SACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,aAAjB;AAAgC,IAAA,KAAK,EAAE;AAAvC,GAAA,EACG,QADH,CADF;AAKH,CAjD2B,CAArB;AAmDN,YAAoC,CAAC,SAArC,GAAiD;AAC9C,EAAA,QAAQ,EAAE,SAAS,CAAC,GAD0B;AAE9C,EAAA,SAAS,EAAE,SAAS,CAAC,MAFyB;AAG9C,EAAA,KAAK,EAAE,SAAS,CAAC;AAH6B,CAAjD;AAMD,YAAY,CAAC,WAAb,GAA2B,mBAA3B","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, focusFirstFocusableChild } from '@progress/kendo-react-common';\n/**\n * Represents the [KendoReact AppBarSpacer component]({% slug contentarrangement_appbar %}#toc-defining-spacings).\n * Used to give additional white space between the AppBar sections and provides a way for customizing its width.\n *\n * @example\n * ```jsx\n *\n * const App = () => {\n *   return (\n *       <AppBar>\n *           <AppBarSection>\n *               <span className=\"k-icon k-i-menu\" />\n *           </AppBarSection>\n *\n *           <AppBarSpacer style={{ width: 8 }} />\n *\n *           <AppBarSection>\n *               <h1 className=\"title\">{tc.text} AppBar</h1>\n *           </AppBarSection>\n *\n *           <AppBarSpacer />\n *\n *           <AppBarSection>\n *               <BadgeContainer>\n *                   <span className=\"k-icon k-i-bell\" />\n *                   <Badge themeColor=\"info\" shape=\"dot\" />\n *               </BadgeContainer>\n *           </AppBarSection>\n *      </AppBar>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport var AppBarSpacer = React.forwardRef(function (props, target) {\n    var children = props.children, className = props.className, style = props.style;\n    var elementRef = React.useRef(null);\n    var focusElement = React.useCallback(function () {\n        if (elementRef.current) {\n            focusFirstFocusableChild(elementRef.current);\n        }\n    }, []);\n    var getImperativeHandle = React.useCallback(function () { return ({\n        element: elementRef.current,\n        focus: focusElement\n    }); }, [focusElement]);\n    React.useImperativeHandle(target, getImperativeHandle);\n    var spacerClasses = React.useMemo(function () { return classNames('k-appbar-spacer', {\n        'k-appbar-spacer-sized': style && style.width && style.width !== null\n    }, className); }, [className, style]);\n    var spacerStyles = React.useMemo(function () {\n        return {\n            flexBasis: style && style.width ? style.width : undefined\n        };\n    }, [style]);\n    return (React.createElement(\"span\", { className: spacerClasses, style: spacerStyles }, children));\n});\nAppBarSpacer.propTypes = {\n    children: PropTypes.any,\n    className: PropTypes.string,\n    style: PropTypes.object\n};\nAppBarSpacer.displayName = 'KendoAppBarSpacer';\n//# sourceMappingURL=AppBarSpacer.js.map"]},"metadata":{},"sourceType":"module"}