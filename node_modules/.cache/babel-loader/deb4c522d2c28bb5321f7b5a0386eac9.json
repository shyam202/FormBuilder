{"ast":null,"code":"exports.defaults = {};\n\nexports.set = function (name, value, options) {\n  // Retrieve options and defaults\n  var opts = options || {};\n  var defaults = exports.defaults; // Apply default value for unspecified options\n\n  var expires = opts.expires || defaults.expires;\n  var domain = opts.domain || defaults.domain;\n  var path = opts.path !== undefined ? opts.path : defaults.path !== undefined ? defaults.path : '/';\n  var secure = opts.secure !== undefined ? opts.secure : defaults.secure;\n  var httponly = opts.httponly !== undefined ? opts.httponly : defaults.httponly;\n  var samesite = opts.samesite !== undefined ? opts.samesite : defaults.samesite; // Determine cookie expiration date\n  // If succesful the result will be a valid Date, otherwise it will be an invalid Date or false(ish)\n\n  var expDate = expires ? new Date( // in case expires is an integer, it should specify the number of days till the cookie expires\n  typeof expires === 'number' ? new Date().getTime() + expires * 864e5 : // else expires should be either a Date object or in a format recognized by Date.parse()\n  expires) : 0; // Set cookie\n\n  document.cookie = name.replace(/[^+#$&^`|]/g, encodeURIComponent) // Encode cookie name\n  .replace('(', '%28').replace(')', '%29') + '=' + value.replace(/[^+#$&/:<-\\[\\]-}]/g, encodeURIComponent) + ( // Encode cookie value (RFC6265)\n  expDate && expDate.getTime() >= 0 ? ';expires=' + expDate.toUTCString() : '') + ( // Add expiration date\n  domain ? ';domain=' + domain : '') + ( // Add domain\n  path ? ';path=' + path : '') + ( // Add path\n  secure ? ';secure' : '') + ( // Add secure option\n  httponly ? ';httponly' : '') + ( // Add httponly option\n  samesite ? ';samesite=' + samesite : ''); // Add samesite option\n};\n\nexports.get = function (name) {\n  var cookies = document.cookie.split(';'); // Iterate all cookies\n\n  while (cookies.length) {\n    var cookie = cookies.pop(); // Determine separator index (\"name=value\")\n\n    var separatorIndex = cookie.indexOf('='); // IE<11 emits the equal sign when the cookie value is empty\n\n    separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;\n    var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\\s+/, '')); // Return cookie value if the name matches\n\n    if (cookie_name === name) {\n      return decodeURIComponent(cookie.slice(separatorIndex + 1));\n    }\n  } // Return `null` as the cookie was not found\n\n\n  return null;\n};\n\nexports.erase = function (name, options) {\n  exports.set(name, '', {\n    expires: -1,\n    domain: options && options.domain,\n    path: options && options.path,\n    secure: 0,\n    httponly: 0\n  });\n};\n\nexports.all = function () {\n  var all = {};\n  var cookies = document.cookie.split(';'); // Iterate all cookies\n\n  while (cookies.length) {\n    var cookie = cookies.pop(); // Determine separator index (\"name=value\")\n\n    var separatorIndex = cookie.indexOf('='); // IE<11 emits the equal sign when the cookie value is empty\n\n    separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex; // add the cookie name and value to the `all` object\n\n    var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\\s+/, ''));\n    all[cookie_name] = decodeURIComponent(cookie.slice(separatorIndex + 1));\n  }\n\n  return all;\n};","map":{"version":3,"sources":["C:/Users/ShyamLakhani/Desktop/my-app/node_modules/browser-cookies/src/browser-cookies.js"],"names":["exports","defaults","set","name","value","options","opts","expires","domain","path","undefined","secure","httponly","samesite","expDate","Date","getTime","document","cookie","replace","encodeURIComponent","toUTCString","get","cookies","split","length","pop","separatorIndex","indexOf","cookie_name","decodeURIComponent","slice","erase","all"],"mappings":"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","sourcesContent":["exports.defaults = {};\r\n\r\nexports.set = function(name, value, options) {\r\n  // Retrieve options and defaults\r\n  var opts = options || {};\r\n  var defaults = exports.defaults;\r\n\r\n  // Apply default value for unspecified options\r\n  var expires  = opts.expires  || defaults.expires;\r\n  var domain   = opts.domain   || defaults.domain;\r\n  var path     = opts.path     !== undefined ? opts.path     : (defaults.path !== undefined ? defaults.path : '/');\r\n  var secure   = opts.secure   !== undefined ? opts.secure   : defaults.secure;\r\n  var httponly = opts.httponly !== undefined ? opts.httponly : defaults.httponly;\r\n  var samesite = opts.samesite !== undefined ? opts.samesite : defaults.samesite;\r\n\r\n  // Determine cookie expiration date\r\n  // If succesful the result will be a valid Date, otherwise it will be an invalid Date or false(ish)\r\n  var expDate = expires ? new Date(\r\n      // in case expires is an integer, it should specify the number of days till the cookie expires\r\n      typeof expires === 'number' ? new Date().getTime() + (expires * 864e5) :\r\n      // else expires should be either a Date object or in a format recognized by Date.parse()\r\n      expires\r\n  ) : 0;\r\n\r\n  // Set cookie\r\n  document.cookie = name.replace(/[^+#$&^`|]/g, encodeURIComponent)                // Encode cookie name\r\n  .replace('(', '%28')\r\n  .replace(')', '%29') +\r\n  '=' + value.replace(/[^+#$&/:<-\\[\\]-}]/g, encodeURIComponent) +                  // Encode cookie value (RFC6265)\r\n  (expDate && expDate.getTime() >= 0 ? ';expires=' + expDate.toUTCString() : '') + // Add expiration date\r\n  (domain   ? ';domain=' + domain     : '') +                                      // Add domain\r\n  (path     ? ';path='   + path       : '') +                                      // Add path\r\n  (secure   ? ';secure'               : '') +                                      // Add secure option\r\n  (httponly ? ';httponly'             : '') +                                      // Add httponly option\r\n  (samesite ? ';samesite=' + samesite : '');                                       // Add samesite option\r\n};\r\n\r\nexports.get = function(name) {\r\n  var cookies = document.cookie.split(';');\r\n  \r\n  // Iterate all cookies\r\n  while(cookies.length) {\r\n    var cookie = cookies.pop();\r\n\r\n    // Determine separator index (\"name=value\")\r\n    var separatorIndex = cookie.indexOf('=');\r\n\r\n    // IE<11 emits the equal sign when the cookie value is empty\r\n    separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;\r\n\r\n    var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\\s+/, ''));\r\n\r\n    // Return cookie value if the name matches\r\n    if (cookie_name === name) {\r\n      return decodeURIComponent(cookie.slice(separatorIndex + 1));\r\n    }\r\n  }\r\n\r\n  // Return `null` as the cookie was not found\r\n  return null;\r\n};\r\n\r\nexports.erase = function(name, options) {\r\n  exports.set(name, '', {\r\n    expires:  -1,\r\n    domain:   options && options.domain,\r\n    path:     options && options.path,\r\n    secure:   0,\r\n    httponly: 0}\r\n  );\r\n};\r\n\r\nexports.all = function() {\r\n  var all = {};\r\n  var cookies = document.cookie.split(';');\r\n\r\n  // Iterate all cookies\r\n  while(cookies.length) {\r\n    var cookie = cookies.pop();\r\n\r\n    // Determine separator index (\"name=value\")\r\n    var separatorIndex = cookie.indexOf('=');\r\n\r\n    // IE<11 emits the equal sign when the cookie value is empty\r\n    separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;\r\n\r\n    // add the cookie name and value to the `all` object\r\n    var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\\s+/, ''));\r\n    all[cookie_name] = decodeURIComponent(cookie.slice(separatorIndex + 1));\r\n  }\r\n\r\n  return all;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}