{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.setXhrHeaders = void 0;\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _trim2 = _interopRequireDefault(require(\"lodash/trim\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar setXhrHeaders = function setXhrHeaders(formio, xhr) {\n  var headers = formio.options.headers;\n\n  if (headers) {\n    var ValidHeaders = {\n      'Content-Disposition': true\n    };\n\n    for (var header in headers) {\n      if (ValidHeaders[header]) {\n        xhr.setRequestHeader(header, headers[header]);\n      }\n    }\n  }\n};\n\nexports.setXhrHeaders = setXhrHeaders;\nvar XHR = {\n  trim: function trim(text) {\n    return (0, _trim2.default)(text, '/');\n  },\n  path: function path(items) {\n    return items.filter(function (item) {\n      return !!item;\n    }).map(XHR.trim).join('/');\n  },\n  upload: function upload(formio, type, xhrCb, file, fileName, dir, progressCallback, groupPermissions, groupId, abortCallback) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      // Send the pre response to sign the upload.\n      var pre = new XMLHttpRequest(); // This only fires on a network error.\n\n      pre.onerror = function (err) {\n        err.networkError = true;\n        reject(err);\n      };\n\n      pre.onabort = reject;\n\n      pre.onload = function () {\n        if (pre.status >= 200 && pre.status < 300) {\n          var response = JSON.parse(pre.response); // Send the file with data.\n\n          var xhr = new XMLHttpRequest();\n\n          if (typeof progressCallback === 'function') {\n            xhr.upload.onprogress = progressCallback;\n          }\n\n          if (typeof abortCallback === 'function') {\n            abortCallback(function () {\n              return xhr.abort();\n            });\n          }\n\n          xhr.openAndSetHeaders = function () {\n            xhr.open.apply(xhr, arguments);\n            setXhrHeaders(formio, xhr);\n          }; // Fire on network error.\n\n\n          xhr.onerror = function (err) {\n            err.networkError = true;\n            reject(err);\n          }; // Fire on network abort.\n\n\n          xhr.onabort = function (err) {\n            err.networkError = true;\n            reject(err);\n          }; // Fired when the response has made it back from the server.\n\n\n          xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              resolve(response);\n            } else {\n              reject(xhr.response || 'Unable to upload file');\n            }\n          }; // Set the onabort error callback.\n\n\n          xhr.onabort = reject; // Get the request and send it to the server.\n\n          xhr.send(xhrCb(xhr, response));\n        } else {\n          reject(pre.response || 'Unable to sign file');\n        }\n      };\n\n      pre.open('POST', \"\".concat(formio.formUrl, \"/storage/\").concat(type));\n      pre.setRequestHeader('Accept', 'application/json');\n      pre.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n      var token = formio.getToken();\n\n      if (token) {\n        pre.setRequestHeader('x-jwt-token', token);\n      }\n\n      pre.send(JSON.stringify({\n        name: XHR.path([dir, fileName]),\n        size: file.size,\n        type: file.type,\n        groupPermissions: groupPermissions,\n        groupId: groupId\n      }));\n    });\n  }\n};\nvar _default = XHR;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ShyamLakhani/Desktop/my-app/node_modules/formiojs/providers/storage/xhr.js"],"names":["Object","defineProperty","exports","value","default","setXhrHeaders","_nativePromiseOnly","_interopRequireDefault","require","_trim2","obj","__esModule","formio","xhr","headers","options","ValidHeaders","header","setRequestHeader","XHR","trim","text","path","items","filter","item","map","join","upload","type","xhrCb","file","fileName","dir","progressCallback","groupPermissions","groupId","abortCallback","resolve","reject","pre","XMLHttpRequest","onerror","err","networkError","onabort","onload","status","response","JSON","parse","onprogress","abort","openAndSetHeaders","open","apply","arguments","send","concat","formUrl","token","getToken","stringify","name","size","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.setXhrHeaders = void 0;\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _trim2 = _interopRequireDefault(require(\"lodash/trim\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar setXhrHeaders = function setXhrHeaders(formio, xhr) {\n  var headers = formio.options.headers;\n\n  if (headers) {\n    var ValidHeaders = {\n      'Content-Disposition': true\n    };\n\n    for (var header in headers) {\n      if (ValidHeaders[header]) {\n        xhr.setRequestHeader(header, headers[header]);\n      }\n    }\n  }\n};\n\nexports.setXhrHeaders = setXhrHeaders;\nvar XHR = {\n  trim: function trim(text) {\n    return (0, _trim2.default)(text, '/');\n  },\n  path: function path(items) {\n    return items.filter(function (item) {\n      return !!item;\n    }).map(XHR.trim).join('/');\n  },\n  upload: function upload(formio, type, xhrCb, file, fileName, dir, progressCallback, groupPermissions, groupId, abortCallback) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      // Send the pre response to sign the upload.\n      var pre = new XMLHttpRequest(); // This only fires on a network error.\n\n      pre.onerror = function (err) {\n        err.networkError = true;\n        reject(err);\n      };\n\n      pre.onabort = reject;\n\n      pre.onload = function () {\n        if (pre.status >= 200 && pre.status < 300) {\n          var response = JSON.parse(pre.response); // Send the file with data.\n\n          var xhr = new XMLHttpRequest();\n\n          if (typeof progressCallback === 'function') {\n            xhr.upload.onprogress = progressCallback;\n          }\n\n          if (typeof abortCallback === 'function') {\n            abortCallback(function () {\n              return xhr.abort();\n            });\n          }\n\n          xhr.openAndSetHeaders = function () {\n            xhr.open.apply(xhr, arguments);\n            setXhrHeaders(formio, xhr);\n          }; // Fire on network error.\n\n\n          xhr.onerror = function (err) {\n            err.networkError = true;\n            reject(err);\n          }; // Fire on network abort.\n\n\n          xhr.onabort = function (err) {\n            err.networkError = true;\n            reject(err);\n          }; // Fired when the response has made it back from the server.\n\n\n          xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              resolve(response);\n            } else {\n              reject(xhr.response || 'Unable to upload file');\n            }\n          }; // Set the onabort error callback.\n\n\n          xhr.onabort = reject; // Get the request and send it to the server.\n\n          xhr.send(xhrCb(xhr, response));\n        } else {\n          reject(pre.response || 'Unable to sign file');\n        }\n      };\n\n      pre.open('POST', \"\".concat(formio.formUrl, \"/storage/\").concat(type));\n      pre.setRequestHeader('Accept', 'application/json');\n      pre.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n      var token = formio.getToken();\n\n      if (token) {\n        pre.setRequestHeader('x-jwt-token', token);\n      }\n\n      pre.send(JSON.stringify({\n        name: XHR.path([dir, fileName]),\n        size: file.size,\n        type: file.type,\n        groupPermissions: groupPermissions,\n        groupId: groupId\n      }));\n    });\n  }\n};\nvar _default = XHR;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}