{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar fileProcessor = function fileProcessor(formio, config) {\n  return function (file, options) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      var xhr = new XMLHttpRequest(); // Fire on network error.\n\n      xhr.onerror = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fire on network abort.\n\n\n      xhr.onabort = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fired when the response has made it back from the server.\n\n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          var mimetype = xhr.getResponseHeader('Content-Type') || file.type;\n          resolve(new File([xhr.response], file.name, {\n            type: mimetype\n          }));\n        } else {\n          reject(xhr.response || 'Unable to process file');\n        }\n      }; // Set the onabort error callback.\n\n\n      xhr.onabort = reject;\n      xhr.open('POST', config.url);\n      var token = formio.getToken();\n\n      if (token) {\n        xhr.setRequestHeader('x-jwt-token', token);\n      }\n\n      xhr.responseType = 'arraybuffer';\n      var data = new FormData();\n      data.append('file', file);\n      data.append('processorOptions', JSON.stringify(config.options || {}));\n      data.append('options', JSON.stringify(options || {})); // Get the request and send it to the server.\n\n      xhr.send(data);\n    });\n  };\n};\n\nvar _default = fileProcessor;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ShyamLakhani/Desktop/my-app/node_modules/formiojs/providers/processor/fileProcessor.js"],"names":["Object","defineProperty","exports","value","default","_nativePromiseOnly","_interopRequireDefault","require","obj","__esModule","fileProcessor","formio","config","file","options","resolve","reject","xhr","XMLHttpRequest","onerror","err","networkError","onabort","onload","status","mimetype","getResponseHeader","type","File","response","name","open","url","token","getToken","setRequestHeader","responseType","data","FormData","append","JSON","stringify","send","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar fileProcessor = function fileProcessor(formio, config) {\n  return function (file, options) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      var xhr = new XMLHttpRequest(); // Fire on network error.\n\n      xhr.onerror = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fire on network abort.\n\n\n      xhr.onabort = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fired when the response has made it back from the server.\n\n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          var mimetype = xhr.getResponseHeader('Content-Type') || file.type;\n          resolve(new File([xhr.response], file.name, {\n            type: mimetype\n          }));\n        } else {\n          reject(xhr.response || 'Unable to process file');\n        }\n      }; // Set the onabort error callback.\n\n\n      xhr.onabort = reject;\n      xhr.open('POST', config.url);\n      var token = formio.getToken();\n\n      if (token) {\n        xhr.setRequestHeader('x-jwt-token', token);\n      }\n\n      xhr.responseType = 'arraybuffer';\n      var data = new FormData();\n      data.append('file', file);\n      data.append('processorOptions', JSON.stringify(config.options || {}));\n      data.append('options', JSON.stringify(options || {})); // Get the request and send it to the server.\n\n      xhr.send(data);\n    });\n  };\n};\n\nvar _default = fileProcessor;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}