{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _uuid = require(\"uuid\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar indexeddb = function indexeddb() {\n  return {\n    title: 'indexedDB',\n    name: 'indexeddb',\n    uploadFile: function uploadFile(file, fileName, dir, progressCallback, url, options) {\n      var _this = this;\n\n      if (!('indexedDB' in window)) {\n        console.log('This browser doesn\\'t support IndexedDB');\n        return;\n      }\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        var request = indexedDB.open(options.indexeddb, 3);\n\n        request.onsuccess = function (event) {\n          var db = event.target.result;\n          resolve(db);\n        };\n\n        request.onupgradeneeded = function (e) {\n          var db = e.target.result;\n          db.createObjectStore(options.indexeddbTable);\n        };\n      }).then(function (db) {\n        var reader = new FileReader();\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          reader.onload = function () {\n            var blobObject = new Blob([file], {\n              type: file.type\n            });\n            var id = (0, _uuid.v4)(blobObject);\n            var data = {\n              id: id,\n              data: blobObject,\n              name: file.name,\n              size: file.size,\n              type: file.type,\n              url: url\n            };\n            var trans = db.transaction([options.indexeddbTable], 'readwrite');\n            var addReq = trans.objectStore(options.indexeddbTable).put(data, id);\n\n            addReq.onerror = function (e) {\n              console.log('error storing data');\n              console.error(e);\n            };\n\n            trans.oncomplete = function () {\n              resolve({\n                storage: 'indexeddb',\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                url: url,\n                id: id\n              });\n            };\n          };\n\n          reader.onerror = function () {\n            return reject(_this);\n          };\n\n          reader.readAsDataURL(file);\n        });\n      });\n    },\n    downloadFile: function downloadFile(file, options) {\n      var _this2 = this;\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        var request = indexedDB.open(options.indexeddb, 3);\n\n        request.onsuccess = function (event) {\n          var db = event.target.result;\n          resolve(db);\n        };\n      }).then(function (db) {\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          var trans = db.transaction([options.indexeddbTable], 'readonly');\n          var store = trans.objectStore(options.indexeddbTable).get(file.id);\n\n          store.onsuccess = function () {\n            trans.oncomplete = function () {\n              var result = store.result;\n              var dbFile = new File([store.result.data], file.name, {\n                type: store.result.type\n              });\n              var reader = new FileReader();\n\n              reader.onload = function (event) {\n                result.url = event.target.result;\n                result.storage = file.storage;\n                resolve(result);\n              };\n\n              reader.onerror = function () {\n                return reject(_this2);\n              };\n\n              reader.readAsDataURL(dbFile);\n            };\n          };\n\n          store.onerror = function () {\n            return reject(_this2);\n          };\n        });\n      });\n    },\n    deleteFile: function deleteFile(file, options) {\n      var _this3 = this;\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        var request = indexedDB.open(options.indexeddb, 3);\n\n        request.onsuccess = function (event) {\n          var db = event.target.result;\n          resolve(db);\n        };\n      }).then(function (db) {\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          var trans = db.transaction([options.indexeddbTable], 'readwrite');\n          var store = trans.objectStore(options.indexeddbTable).delete(file.id);\n\n          store.onsuccess = function () {\n            trans.oncomplete = function () {\n              var result = store.result;\n              resolve(result);\n            };\n          };\n\n          store.onerror = function () {\n            return reject(_this3);\n          };\n        });\n      });\n    }\n  };\n};\n\nindexeddb.title = 'IndexedDB';\nvar _default = indexeddb;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ShyamLakhani/Desktop/my-app/node_modules/formiojs/providers/storage/indexeddb.js"],"names":["Object","defineProperty","exports","value","default","_uuid","require","_nativePromiseOnly","_interopRequireDefault","obj","__esModule","indexeddb","title","name","uploadFile","file","fileName","dir","progressCallback","url","options","_this","window","console","log","resolve","request","indexedDB","open","onsuccess","event","db","target","result","onupgradeneeded","e","createObjectStore","indexeddbTable","then","reader","FileReader","reject","onload","blobObject","Blob","type","id","v4","data","size","trans","transaction","addReq","objectStore","put","onerror","error","oncomplete","storage","readAsDataURL","downloadFile","_this2","store","get","dbFile","File","deleteFile","_this3","delete","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nvar _uuid = require(\"uuid\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar indexeddb = function indexeddb() {\n  return {\n    title: 'indexedDB',\n    name: 'indexeddb',\n    uploadFile: function uploadFile(file, fileName, dir, progressCallback, url, options) {\n      var _this = this;\n\n      if (!('indexedDB' in window)) {\n        console.log('This browser doesn\\'t support IndexedDB');\n        return;\n      }\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        var request = indexedDB.open(options.indexeddb, 3);\n\n        request.onsuccess = function (event) {\n          var db = event.target.result;\n          resolve(db);\n        };\n\n        request.onupgradeneeded = function (e) {\n          var db = e.target.result;\n          db.createObjectStore(options.indexeddbTable);\n        };\n      }).then(function (db) {\n        var reader = new FileReader();\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          reader.onload = function () {\n            var blobObject = new Blob([file], {\n              type: file.type\n            });\n            var id = (0, _uuid.v4)(blobObject);\n            var data = {\n              id: id,\n              data: blobObject,\n              name: file.name,\n              size: file.size,\n              type: file.type,\n              url: url\n            };\n            var trans = db.transaction([options.indexeddbTable], 'readwrite');\n            var addReq = trans.objectStore(options.indexeddbTable).put(data, id);\n\n            addReq.onerror = function (e) {\n              console.log('error storing data');\n              console.error(e);\n            };\n\n            trans.oncomplete = function () {\n              resolve({\n                storage: 'indexeddb',\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                url: url,\n                id: id\n              });\n            };\n          };\n\n          reader.onerror = function () {\n            return reject(_this);\n          };\n\n          reader.readAsDataURL(file);\n        });\n      });\n    },\n    downloadFile: function downloadFile(file, options) {\n      var _this2 = this;\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        var request = indexedDB.open(options.indexeddb, 3);\n\n        request.onsuccess = function (event) {\n          var db = event.target.result;\n          resolve(db);\n        };\n      }).then(function (db) {\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          var trans = db.transaction([options.indexeddbTable], 'readonly');\n          var store = trans.objectStore(options.indexeddbTable).get(file.id);\n\n          store.onsuccess = function () {\n            trans.oncomplete = function () {\n              var result = store.result;\n              var dbFile = new File([store.result.data], file.name, {\n                type: store.result.type\n              });\n              var reader = new FileReader();\n\n              reader.onload = function (event) {\n                result.url = event.target.result;\n                result.storage = file.storage;\n                resolve(result);\n              };\n\n              reader.onerror = function () {\n                return reject(_this2);\n              };\n\n              reader.readAsDataURL(dbFile);\n            };\n          };\n\n          store.onerror = function () {\n            return reject(_this2);\n          };\n        });\n      });\n    },\n    deleteFile: function deleteFile(file, options) {\n      var _this3 = this;\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        var request = indexedDB.open(options.indexeddb, 3);\n\n        request.onsuccess = function (event) {\n          var db = event.target.result;\n          resolve(db);\n        };\n      }).then(function (db) {\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          var trans = db.transaction([options.indexeddbTable], 'readwrite');\n          var store = trans.objectStore(options.indexeddbTable).delete(file.id);\n\n          store.onsuccess = function () {\n            trans.oncomplete = function () {\n              var result = store.result;\n              resolve(result);\n            };\n          };\n\n          store.onerror = function () {\n            return reject(_this3);\n          };\n        });\n      });\n    }\n  };\n};\n\nindexeddb.title = 'IndexedDB';\nvar _default = indexeddb;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}