export interface ReducerEvent<Payload = any> {
    type: string;
    name: string;
    payload?: Payload;
}
export interface ReduceFunction<State = any, Payload = any> {
    (state: State, event: ReducerEvent<Payload>): State;
    $emit(type: string | {
        toString(): string;
    }, state: State, payload: Payload): State;
    toString(): string;
}
export declare type InitialStateCreator<State = any> = (state?: Partial<State> | any) => State;
export declare type Reducer<State = any, Payload = any> = (state: State, payload: Payload, reset: InitialStateCreator<State>) => State;
export declare type Reducers<State = any, Payload = any> = Record<string, Reducer<State, Payload>>;
export interface On<State = any, Payload = any> {
    (name: string | {
        toString(): string;
    }, reducer: Reducer<State, Payload>): On<State, Payload>;
}
export interface ReducersCreator<State = any, Payload = any> {
    (on: On<State, Payload>): void;
}
export interface SandboxReducers<State = any, Payload = any> {
    (reducerName: string | {
        toString(): string;
    }, defaultStateOptions?: Partial<State>): ReduceFunction<State, Payload>;
    on(name: string | {
        toString(): string;
    }, reducer: Reducer<State, Payload>): SandboxReducers<State, Payload>;
}
/**
 * Create a new Reducer
 * @param createInitialState
 * @param reducers
 */
export declare function createReducer<State = any, Payload = any>(reducers: Reducers<State, Payload> | ReducersCreator, createInitialState: InitialStateCreator): SandboxReducers;
