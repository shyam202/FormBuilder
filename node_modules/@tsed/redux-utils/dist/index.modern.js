function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function combine(...args) {
  return args.reduce((reducers, reduce) => {
    return _extends({}, reducers, {
      [reduce.toString()]: reduce
    });
  }, {});
}

/**
 * Create a new Reducer
 * @param createInitialState
 * @param reducers
 */
function createReducer(reducers, createInitialState) {
  if (typeof reducers === "function") {
    const localReducers = {};

    const on = (name, reducer) => {
      localReducers[String(name)] = reducer;
      return on;
    };

    reducers(on);
    return createReducer(localReducers, createInitialState);
  }

  const sandboxReducers = (reducerName, defaultStateOptions) => {
    const name = String(reducerName);

    const initialState = _extends({
      name
    }, createInitialState(defaultStateOptions));

    const reduce = (state = initialState, event) => {
      const {
        type,
        name: actionName,
        payload
      } = event;

      if (actionName !== name) {
        return state;
      }

      if (reducers[type]) {
        return reduce.$emit(type, state, payload);
      }

      if (reducers.default) {
        return reduce.$emit("default", state, payload);
      }

      return state;
    };

    reduce.$emit = (type, state, payload) => {
      return _extends({}, reducers[type](state, payload, () => createInitialState(defaultStateOptions)), {
        name
      });
    };

    reduce.toString = () => name;

    return reduce;
  };

  sandboxReducers.on = (name, reducer) => {
    reducers[String(name)] = reducer;
    return sandboxReducers;
  };

  return sandboxReducers;
}

let AUTO_INC = 0;

function getActionType() {
  return `ACTION:${AUTO_INC++}`;
}

function createAction(options = {}) {
  const {
    type = getActionType(),
    mapper = f => f
  } = options;

  const action = (name, payload, ...args) => ({
    type,
    name,
    payload: mapper(payload, ...args)
  });

  action.toString = () => type;

  return action;
}

export { combine, createAction, createReducer };
//# sourceMappingURL=index.modern.js.map
