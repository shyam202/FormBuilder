function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function combine() {
  return [].slice.call(arguments).reduce(function (reducers, reduce) {
    var _extends2;

    return _extends({}, reducers, (_extends2 = {}, _extends2[reduce.toString()] = reduce, _extends2));
  }, {});
}

/**
 * Create a new Reducer
 * @param createInitialState
 * @param reducers
 */
function createReducer(reducers, createInitialState) {
  if (typeof reducers === "function") {
    var localReducers = {};

    var on = function on(name, reducer) {
      localReducers[String(name)] = reducer;
      return on;
    };

    reducers(on);
    return createReducer(localReducers, createInitialState);
  }

  var sandboxReducers = function sandboxReducers(reducerName, defaultStateOptions) {
    var name = String(reducerName);

    var initialState = _extends({
      name: name
    }, createInitialState(defaultStateOptions));

    var reduce = function reduce(state, event) {
      if (state === void 0) {
        state = initialState;
      }

      var type = event.type,
          actionName = event.name,
          payload = event.payload;

      if (actionName !== name) {
        return state;
      }

      if (reducers[type]) {
        return reduce.$emit(type, state, payload);
      }

      if (reducers["default"]) {
        return reduce.$emit("default", state, payload);
      }

      return state;
    };

    reduce.$emit = function (type, state, payload) {
      return _extends({}, reducers[type](state, payload, function () {
        return createInitialState(defaultStateOptions);
      }), {
        name: name
      });
    };

    reduce.toString = function () {
      return name;
    };

    return reduce;
  };

  sandboxReducers.on = function (name, reducer) {
    reducers[String(name)] = reducer;
    return sandboxReducers;
  };

  return sandboxReducers;
}

var AUTO_INC = 0;

function getActionType() {
  return "ACTION:" + AUTO_INC++;
}

function createAction(options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$type = _options.type,
      type = _options$type === void 0 ? getActionType() : _options$type,
      _options$mapper = _options.mapper,
      mapper = _options$mapper === void 0 ? function (f) {
    return f;
  } : _options$mapper;

  var action = function action(name, payload) {
    return {
      type: type,
      name: name,
      payload: mapper.apply(void 0, [payload].concat([].slice.call(arguments, 2)))
    };
  };

  action.toString = function () {
    return type;
  };

  return action;
}

exports.combine = combine;
exports.createAction = createAction;
exports.createReducer = createReducer;
//# sourceMappingURL=index.js.map
