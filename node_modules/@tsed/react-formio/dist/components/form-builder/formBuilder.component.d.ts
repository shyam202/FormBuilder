import { ComponentSchema } from "formiojs";
import PropTypes from "prop-types";
import React from "react";
export interface FormBuilderProps {
    components: ComponentSchema[];
    display?: string;
    options?: any;
    builder?: any;
    onChange?: (components: ComponentSchema[]) => void;
    onAddComponent?: Function;
    onUpdateComponent?: Function;
    onRemoveComponent?: Function;
    onSaveComponent?: Function;
    onCancelComponent?: Function;
    onMoveComponent?: Function;
    onEditComponent?: Function;
    onEditJson?: Function;
    onCopyComponent?: Function;
    onPasteComponent?: Function;
}
export declare class FormBuilder extends React.Component<FormBuilderProps, any> {
    static defaultProps: {
        options: {};
        onChange: (...args: any[]) => void;
        onReady: (...args: any[]) => void;
        onDestroy: (...args: any[]) => void;
    };
    static propTypes: {
        components: PropTypes.Requireable<any[]>;
        display: PropTypes.Requireable<string>;
        options: PropTypes.Requireable<object>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onAddComponent: PropTypes.Requireable<(...args: any[]) => any>;
        onUpdateComponent: PropTypes.Requireable<(...args: any[]) => any>;
        onRemoveComponent: PropTypes.Requireable<(...args: any[]) => any>;
        onSaveComponent: PropTypes.Requireable<(...args: any[]) => any>;
        onCancelComponent: PropTypes.Requireable<(...args: any[]) => any>;
        onMoveComponent: PropTypes.Requireable<(...args: any[]) => any>;
        onEditComponent: PropTypes.Requireable<(...args: any[]) => any>;
        onEditJson: PropTypes.Requireable<(...args: any[]) => any>;
        onCopyComponent: PropTypes.Requireable<(...args: any[]) => any>;
        onPasteComponent: PropTypes.Requireable<(...args: any[]) => any>;
    };
    private elRef;
    private builderRef;
    constructor(props: FormBuilderProps);
    componentDidMount(): Promise<void>;
    create(props: FormBuilderProps): Promise<void>;
    componentWillUnmount(): void;
    componentWillReceiveProps(nextProps: FormBuilderProps): Promise<void>;
    whenComponentsChange(components: ComponentSchema[]): void;
    render(): JSX.Element;
}
