import { FormSchema, Submission } from "../../interfaces";
import { RoleSchema } from "../../interfaces/RoleSchema";
export interface Choice {
    label: string;
    value: string;
}
export interface Access {
    roles: string[];
    type: string;
}
export declare type AccessRoles = Record<string, string[]>;
export declare type FormAccessSchema = {
    access: FormSchema;
    submissionAccess: FormSchema;
};
export declare type SubmissionAccess = {
    access: Submission<AccessRoles>;
    submissionAccess: Submission<AccessRoles>;
};
export declare function getFormAccess(roles: RoleSchema[]): FormAccessSchema;
export declare function dataAccessToSubmissions(form: Partial<FormSchema>, formAccess: FormAccessSchema): SubmissionAccess;
export declare function submissionsToDataAccess(form: Partial<FormSchema>, submissions: SubmissionAccess): Partial<FormSchema>;
export declare function shouldUpdate(type: string, submission: Submission<AccessRoles>, submissions: SubmissionAccess): boolean;
export declare function updateSubmissions(type: string, submission: Submission<AccessRoles>, submissions: SubmissionAccess, cb?: Function): SubmissionAccess;
