/// <reference types="react" />
import { FormEdit } from "../../index";
declare const _default: {
    title: string;
    component: typeof FormEdit;
    argTypes: {
        form: {
            control: {
                type: string;
            };
        };
        typeChoices: {
            control: {
                type: string;
            };
        };
        displayChoices: {
            control: {
                type: string;
            };
        };
        options: {
            control: {
                type: string;
            };
        };
        enableTags: {
            control: {
                type: string;
            };
        };
        onSubmit: {
            action: string;
        };
        onChange: {
            action: string;
        };
        onCopy: {
            action: string;
        };
    };
    parameters: {
        docs: {
            source: {
                type: string;
            };
        };
    };
};
export default _default;
export declare const Sandbox: {
    (args: any): JSX.Element;
    args: {
        form: {
            type: string;
            tags: any[];
            owner: string;
            components: {
                label: string;
                labelPosition: string;
                placeholder: string;
                description: string;
                tooltip: string;
                prefix: string;
                suffix: string;
                widget: {
                    type: string;
                };
                inputMask: string;
                allowMultipleMasks: boolean;
                customClass: string;
                tabindex: string;
                autocomplete: string;
                hidden: boolean;
                hideLabel: boolean;
                showWordCount: boolean;
                showCharCount: boolean;
                mask: boolean;
                autofocus: boolean;
                spellcheck: boolean;
                disabled: boolean;
                tableView: boolean;
                modalEdit: boolean;
                multiple: boolean;
                persistent: boolean;
                inputFormat: string;
                protected: boolean;
                dbIndex: boolean;
                case: string;
                encrypted: boolean;
                redrawOn: string;
                clearOnHide: boolean;
                customDefaultValue: string;
                calculateValue: string;
                calculateServer: boolean;
                allowCalculateOverride: boolean;
                validateOn: string;
                validate: {
                    required: boolean;
                    pattern: string;
                    customMessage: string;
                    custom: string;
                    customPrivate: boolean;
                    json: string;
                    minLength: string;
                    maxLength: string;
                    strictDateValidation: boolean;
                    multiple: boolean;
                    unique: boolean;
                };
                unique: boolean;
                errorLabel: string;
                key: string;
                tags: any[];
                properties: {};
                conditional: {
                    show: any;
                    when: any;
                    eq: string;
                    json: string;
                };
                customConditional: string;
                logic: any[];
                attributes: {};
                overlay: {
                    style: string;
                    page: string;
                    left: string;
                    top: string;
                    width: string;
                    height: string;
                };
                type: string;
                input: boolean;
                refreshOn: string;
                inputType: string;
                id: string;
                defaultValue: string;
            }[];
            title: string;
            display: string;
            access: {
                roles: string[];
                type: string;
            }[];
            submissionAccess: any[];
            controller: string;
            properties: {};
            settings: {};
            name: string;
            path: string;
            machineName: string;
        };
        typeChoices: {
            label: string;
            value: string;
        }[];
        displayChoices: {
            label: string;
            value: string;
        }[];
        enableTags: boolean;
        options: {
            template: string;
            iconset: string;
        };
    };
};
export declare const WithoutTypeChoices: {
    (args: any): JSX.Element;
    args: {
        form: {
            type: string;
            tags: any[];
            owner: string;
            components: {
                label: string;
                labelPosition: string;
                placeholder: string;
                description: string;
                tooltip: string;
                prefix: string;
                suffix: string;
                widget: {
                    type: string;
                };
                inputMask: string;
                allowMultipleMasks: boolean;
                customClass: string;
                tabindex: string;
                autocomplete: string;
                hidden: boolean;
                hideLabel: boolean;
                showWordCount: boolean;
                showCharCount: boolean;
                mask: boolean;
                autofocus: boolean;
                spellcheck: boolean;
                disabled: boolean;
                tableView: boolean;
                modalEdit: boolean;
                multiple: boolean;
                persistent: boolean;
                inputFormat: string;
                protected: boolean;
                dbIndex: boolean;
                case: string;
                encrypted: boolean;
                redrawOn: string;
                clearOnHide: boolean;
                customDefaultValue: string;
                calculateValue: string;
                calculateServer: boolean;
                allowCalculateOverride: boolean;
                validateOn: string;
                validate: {
                    required: boolean;
                    pattern: string;
                    customMessage: string;
                    custom: string;
                    customPrivate: boolean;
                    json: string;
                    minLength: string;
                    maxLength: string;
                    strictDateValidation: boolean;
                    multiple: boolean;
                    unique: boolean;
                };
                unique: boolean;
                errorLabel: string;
                key: string;
                tags: any[];
                properties: {};
                conditional: {
                    show: any;
                    when: any;
                    eq: string;
                    json: string;
                };
                customConditional: string;
                logic: any[];
                attributes: {};
                overlay: {
                    style: string;
                    page: string;
                    left: string;
                    top: string;
                    width: string;
                    height: string;
                };
                type: string;
                input: boolean;
                refreshOn: string;
                inputType: string;
                id: string;
                defaultValue: string;
            }[];
            title: string;
            display: string;
            access: {
                roles: string[];
                type: string;
            }[];
            submissionAccess: any[];
            controller: string;
            properties: {};
            settings: {};
            name: string;
            path: string;
            machineName: string;
        };
        displayChoices: {
            label: string;
            value: string;
        }[];
        enableTags: boolean;
        options: {
            template: string;
            iconset: string;
        };
    };
};
export declare const WithoutTags: {
    (args: any): JSX.Element;
    args: {
        form: {
            type: string;
            tags: any[];
            owner: string;
            components: {
                label: string;
                labelPosition: string;
                placeholder: string;
                description: string;
                tooltip: string;
                prefix: string;
                suffix: string;
                widget: {
                    type: string;
                };
                inputMask: string;
                allowMultipleMasks: boolean;
                customClass: string;
                tabindex: string;
                autocomplete: string;
                hidden: boolean;
                hideLabel: boolean;
                showWordCount: boolean;
                showCharCount: boolean;
                mask: boolean;
                autofocus: boolean;
                spellcheck: boolean;
                disabled: boolean;
                tableView: boolean;
                modalEdit: boolean;
                multiple: boolean;
                persistent: boolean;
                inputFormat: string;
                protected: boolean;
                dbIndex: boolean;
                case: string;
                encrypted: boolean;
                redrawOn: string;
                clearOnHide: boolean;
                customDefaultValue: string;
                calculateValue: string;
                calculateServer: boolean;
                allowCalculateOverride: boolean;
                validateOn: string;
                validate: {
                    required: boolean;
                    pattern: string;
                    customMessage: string;
                    custom: string;
                    customPrivate: boolean;
                    json: string;
                    minLength: string;
                    maxLength: string;
                    strictDateValidation: boolean;
                    multiple: boolean;
                    unique: boolean;
                };
                unique: boolean;
                errorLabel: string;
                key: string;
                tags: any[];
                properties: {};
                conditional: {
                    show: any;
                    when: any;
                    eq: string;
                    json: string;
                };
                customConditional: string;
                logic: any[];
                attributes: {};
                overlay: {
                    style: string;
                    page: string;
                    left: string;
                    top: string;
                    width: string;
                    height: string;
                };
                type: string;
                input: boolean;
                refreshOn: string;
                inputType: string;
                id: string;
                defaultValue: string;
            }[];
            title: string;
            display: string;
            access: {
                roles: string[];
                type: string;
            }[];
            submissionAccess: any[];
            controller: string;
            properties: {};
            settings: {};
            name: string;
            path: string;
            machineName: string;
        };
        displayChoices: {
            label: string;
            value: string;
        }[];
        enableTags: boolean;
        options: {
            template: string;
            iconset: string;
        };
    };
};
