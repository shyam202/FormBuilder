/// <reference types="react" />
import PropTypes from "prop-types";
import { FormOptions, FormSchema, Submission } from "../../interfaces";
export interface ChangedSubmission<T = any> extends Submission<T> {
    changed: any;
    isValid: boolean;
}
export interface FormProps {
    name?: string;
    /**
     *
     */
    className?: string;
    /**
     *
     */
    src?: string;
    /**
     * url to fetch form
     */
    url?: string;
    /**
     * Raw form object
     */
    form: Partial<FormSchema>;
    /**
     * Data submission
     */
    submission?: Submission;
    /**
     * Configuration option
     */
    options?: FormOptions;
    onPrevPage?: Function;
    onNextPage?: Function;
    onCancel?: Function;
    onChange?: (submission: ChangedSubmission) => void;
    onCustomEvent?: Function;
    onComponentChange?: Function;
    onSubmit?: Function;
    onSubmitDone?: Function;
    onFormLoad?: Function;
    onError?: Function;
    onRender?: Function;
    onAttach?: Function;
    onBuild?: Function;
    onFocus?: Function;
    onBlur?: Function;
    onInitialized?: Function;
    onFormReady?: (formio: any) => void;
    formioform?: any;
}
export declare function Form(props: Partial<FormProps>): JSX.Element;
export declare namespace Form {
    var propTypes: {
        name: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        /**
         *
         */
        src: PropTypes.Requireable<string>;
        /**
         * url to fetch form
         */
        url: PropTypes.Requireable<string>;
        /**
         * Raw form object
         */
        form: PropTypes.Requireable<object>;
        /**
         * Data submission
         */
        submission: PropTypes.Requireable<object>;
        /**
         * Configuration option
         */
        options: PropTypes.Requireable<PropTypes.InferProps<{
            readOnly: PropTypes.Requireable<boolean>;
            noAlerts: PropTypes.Requireable<boolean>;
            i18n: PropTypes.Requireable<any>;
            template: PropTypes.Requireable<string>;
            saveDraft: PropTypes.Requireable<boolean>;
        }>>;
        onPrevPage: PropTypes.Requireable<(...args: any[]) => any>;
        onNextPage: PropTypes.Requireable<(...args: any[]) => any>;
        onCancel: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onCustomEvent: PropTypes.Requireable<(...args: any[]) => any>;
        onComponentChange: PropTypes.Requireable<(...args: any[]) => any>;
        onSubmit: PropTypes.Requireable<(...args: any[]) => any>;
        onSubmitDone: PropTypes.Requireable<(...args: any[]) => any>;
        onFormLoad: PropTypes.Requireable<(...args: any[]) => any>;
        onError: PropTypes.Requireable<(...args: any[]) => any>;
        onRender: PropTypes.Requireable<(...args: any[]) => any>;
        onAttach: PropTypes.Requireable<(...args: any[]) => any>;
        onBuild: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onInitialized: PropTypes.Requireable<(...args: any[]) => any>;
        onFormReady: PropTypes.Requireable<(...args: any[]) => any>;
        formioform: PropTypes.Requireable<any>;
    };
}
